
DELIMITER $$

DROP PROCEDURE IF EXISTS unnest_json_silent $$

CREATE PROCEDURE unnest_json_silent(
    IN p_json_object JSON
)
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE key_name VARCHAR(255);
    DECLARE array_length INT;
    DECLARE i INT DEFAULT 0;
    DECLARE create_sql TEXT DEFAULT 'CREATE TEMPORARY TABLE tmp_unnested (idx INT';
    DECLARE insert_columns TEXT DEFAULT 'idx';
    DECLARE insert_values TEXT DEFAULT '';

    DECLARE key_cursor CURSOR FOR
        SELECT JSON_UNQUOTE(JSON_EXTRACT(JSON_KEYS(p_json_object), CONCAT('$[', n, ']'))) as key_val
        FROM (SELECT 0 as n UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4
              UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) nums
        WHERE n < JSON_LENGTH(JSON_KEYS(p_json_object));

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Drop if exists
    DROP TEMPORARY TABLE IF EXISTS tmp_unnested;

    -- Build CREATE TABLE statement
    OPEN key_cursor;
    read_loop: LOOP
        FETCH key_cursor INTO key_name;
        IF done THEN
            LEAVE read_loop;
        END IF;

        SET create_sql = CONCAT(create_sql, ', ', key_name, ' VARCHAR(255)');
        SET insert_columns = CONCAT(insert_columns, ', ', key_name);
    END LOOP;
    CLOSE key_cursor;

    SET create_sql = CONCAT(create_sql, ') ENGINE=MEMORY');

    -- Create the table
    SET @sql = create_sql;
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

    -- Get array length from first key
    SET array_length = JSON_LENGTH(JSON_EXTRACT(p_json_object, CONCAT('$.', JSON_UNQUOTE(JSON_EXTRACT(JSON_KEYS(p_json_object), '$[0]')))));

    -- Insert data row by row
    SET i = 0;
    WHILE i < array_length DO
        SET insert_values = CONCAT(i + 1); -- idx value

        -- Reset cursor
        SET done = FALSE;
        OPEN key_cursor;
        read_loop2: LOOP
            FETCH key_cursor INTO key_name;
            IF done THEN
                LEAVE read_loop2;
            END IF;

            SET insert_values = CONCAT(insert_values, ', ',
                QUOTE(COALESCE(JSON_UNQUOTE(JSON_EXTRACT(p_json_object, CONCAT('$.', key_name, '[', i, ']'))), '')));
        END LOOP;
        CLOSE key_cursor;

        -- Insert the row
        SET @sql = CONCAT('INSERT INTO tmp_unnested (', insert_columns, ') VALUES (', insert_values, ')');
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;

        SET i = i + 1;
    END WHILE;
END$$
DROP PROCEDURE IF EXISTS unnest_json;
CREATE PROCEDURE unnest_json(
    IN p_json_object JSON
)
BEGIN
    CALL unnest_json_silent(p_json_object);
    SELECT * FROM tmp_unnested ORDER BY idx;
END$$
DROP PROCEDURE IF EXISTS pos_invoice_item_bulk_upsert $$
-- Procedure: pos_invoice_item_bulk_upsert
-- Purpose: Bulk insert or update POS Invoice Items from JSON input.
-- Inputs:
--   p_invoice_id : Target POS Invoice (parent id).
--   p_user       : User performing the operation (sets owner/modified_by).
--   p_json_data  : JSON object with arrays (names, item_codes, item_names, descriptions, uoms, qtys, rates, amounts, folio_windows).
-- {
--   "names":        ["row1","row2",...],               -- optional (autogenerated if blank)
--   "item_codes":   ["ITEM-001","ITEM-002",...],       -- required
--   "item_names":   ["Item 1","Item 2",...],           -- optional (fallback to Item master)
--   "descriptions": ["Desc 1","Desc 2",...],           -- optional (fallback to Item master)
--   "uoms":         ["Unit","Kg",...],                 -- optional (fallback to Item master)
--   "qtys":         [1.0,2.5,...],                     -- optional (default 0)
--   "rates":        [100.0,150.0,...],                 -- optional (fallback to Item.standard_rate)
--   "amounts":      [100.0,375.0,...],                 -- optional (auto-calculated if missing)
--   "folio_windows":["FOLIO-A","FOLIO-B",...]          -- optional
-- }
-- Behavior:
--   1. Flattens JSON arrays into rows via unnest_json_silent.
--   2. Enriches items by joining with v_item_defaults for accounts and defaults.
--   3. Prepares staged rows in tmp_prepared, ensuring required fields are filled.
--   4. Inserts/updates tabPOS Invoice Item in bulk (ON DUPLICATE KEY UPDATE).
--   5. Returns all items for the invoice after operation.
-- Notes: Cleans up temp tables at the end. Safe and idempotent.
CREATE PROCEDURE pos_invoice_item_bulk_upsert(
    IN p_invoice_id VARCHAR(140),
    IN p_user VARCHAR(140),
    IN p_json_data JSON
)
BEGIN
    -- Drop staging tables if they exist
    DROP TEMPORARY TABLE IF EXISTS tmp_unnested;
    DROP TEMPORARY TABLE IF EXISTS tmp_prepared;

    -- 1) Flatten JSON into tmp_unnested
    CALL unnest_json_silent(p_json_data);

    -- 2) Safety check
    SET @row_count = 0;
    SELECT COUNT(*) INTO @row_count FROM tmp_unnested;
    IF @row_count = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No data found in JSON input';
    END IF;

    -- 3) Prepare merged data into tmp_prepared
    CREATE TEMPORARY TABLE tmp_prepared AS
    SELECT
        IF(COALESCE(u.names,'')='',
           CONCAT(p_invoice_id,'-',COALESCE(u.item_codes,'ITEM'),'-',LPAD(u.idx,3,'0')),
           u.names) AS name,
        p_invoice_id                                AS parent,
        'POS Invoice'                               AS parenttype,
        'items'                                     AS parentfield,
        COALESCE(u.item_codes,'')                   AS item_code,
        COALESCE(u.item_names, d.item_name, u.item_codes,'') AS item_name,
        COALESCE(u.descriptions, d.description, d.item_name, u.item_codes,'') AS description,
        COALESCE(u.uoms, d.stock_uom,'Unit')        AS uom,
        CAST(COALESCE(u.qtys,'0') AS DECIMAL(12,2)) AS qty,
        CAST(COALESCE(u.rates, d.standard_rate,'0') AS DECIMAL(12,2)) AS rate,
        CAST(
            COALESCE(
                u.amounts,
                CAST(COALESCE(u.qtys,'0') AS DECIMAL(12,2)) *
                CAST(COALESCE(u.rates, d.standard_rate,'0') AS DECIMAL(12,2))
            ,'0')
        AS DECIMAL(12,2))                           AS base_amount,
        COALESCE(d.income_account,'')               AS income_account,
        COALESCE(d.cost_center,'')                  AS cost_center,
        COALESCE(u.folio_windows,'')                AS folio_window,
        NOW()                                       AS creation,
        NOW()                                       AS modified,
        p_user                                      AS owner,
        p_user                                      AS modified_by
    FROM tmp_unnested u
    LEFT JOIN v_item_defaults d ON d.item_code = u.item_codes;

    -- 4) Flat insert/upsert from tmp_prepared
    INSERT INTO `tabPOS Invoice Item`
    (name, parent, parenttype, parentfield,
     item_code, item_name, description, uom, qty, rate, base_amount,
     income_account, cost_center, folio_window, creation, modified, owner, modified_by)
    SELECT
        name,
        parent,
        parenttype,
        parentfield,
        item_code,
        COALESCE(item_name , item_code),
        COALESCE(description),
        COALESCE(uom , 'Unit'),
        qty,
        rate,
        base_amount,
        income_account,
        cost_center,
        folio_window,
        creation,
        modified,
        owner,
        modified_by
    FROM tmp_prepared
    ON DUPLICATE KEY UPDATE
        item_code     = VALUES(item_code),
        item_name     = VALUES(item_name),
        description   = VALUES(description),
        uom           = VALUES(uom),
        qty           = VALUES(qty),
        rate          = VALUES(rate),
        base_amount   = VALUES(base_amount),
        income_account= VALUES(income_account),
        cost_center   = VALUES(cost_center),
        folio_window  = VALUES(folio_window),
        modified      = NOW(),
        modified_by   = p_user;

    -- 5) Return updated invoice items
    SELECT
        pii.name,
        pii.parent,
        pii.item_code,
        pii.item_name,
        pii.description,
        pii.uom,
        pii.qty,
        pii.rate,
        pii.base_amount,
        pii.income_account,
        pii.cost_center,
        pii.folio_window,
        pii.creation,
        pii.modified,
        pii.owner,
        pii.modified_by
    FROM `tabPOS Invoice Item` pii
    WHERE pii.parent = p_invoice_id
    ORDER BY pii.creation, pii.name;

    -- Cleanup
    DROP TEMPORARY TABLE IF EXISTS tmp_prepared;
    DROP TEMPORARY TABLE IF EXISTS tmp_unnested;
END$$
